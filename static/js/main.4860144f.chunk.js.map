{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["server","App","state","file","uploadFile","signedRequest","url","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","console","log","alert","send","getSignedRequest","name","type","responseText","response","JSON","parse","onFormSubmit","e","preventDefault","document","getElementById","files","onChange","setState","target","this","className","onSubmit","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAGMA,G,MAAS,+CA+EAC,E,2MA5EbC,MAAQ,CACNC,KAAM,M,EAGRC,WAAa,SAACD,EAAME,EAAeC,GACjC,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOJ,GAChBE,EAAIG,mBAAqB,WACA,IAAnBH,EAAII,aACa,MAAfJ,EAAIK,OACNC,QAAQC,IAAIR,GAGZS,MAAM,4BAIZR,EAAIS,KAAKb,I,EAEXc,iBAAmB,SAACd,GAClB,IAAMI,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAT,UAAmBT,EAAnB,8BAA+CG,EAAKe,KAApD,sBAAsEf,EAAKgB,OAC3EZ,EAAIG,mBAAqB,WAEvB,GADAG,QAAQC,IAAIP,EAAIa,cACO,IAAnBb,EAAII,WACN,GAAmB,MAAfJ,EAAIK,OAAgB,CACtB,IAAMS,EAAWC,KAAKC,MAAMhB,EAAIa,cAChCP,QAAQC,IAAIO,GACZ,EAAKjB,WAAWD,EAAMkB,EAAShB,cAAegB,EAASf,UAGvDS,MAAM,8BAIZR,EAAIS,Q,EAGNQ,aAAe,SAAAC,GACbA,EAAEC,iBACF,IACMvB,EADQwB,SAASC,eAAe,cAAcC,MACjC,GACnB,GAAY,MAAR1B,EACF,OAAOY,MAAM,qBAEfF,QAAQC,IAAIX,GACZ,EAAKc,iBAAiBd,I,EAMxB2B,SAAW,SAACL,GACV,EAAKM,SAAS,CAAE5B,KAAMsB,EAAEO,OAAOH,MAAM,M,wEAG7B,IAAD,OAEP,OADAhB,QAAQC,IAAImB,KAAK/B,OAEf,yBAAKgC,UAAU,OACb,4CACA,0BAAMC,SAAU,SAAAV,GAAC,OAAI,EAAKD,aAAaC,KACrC,2CACA,2BAAON,KAAK,OAAOD,KAAK,UAAUkB,GAAG,aAAaN,SAAU,SAAAL,GAAC,OAAI,EAAKK,SAASL,MAC/E,4BAAQN,KAAK,UAAb,gB,GAjEQkB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4860144f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// const server = `http://localhost:3010`\nconst server = 'https://boiling-caverns-58324.herokuapp.com'\n\nclass App extends React.Component {\n  state = {\n    file: null\n  }\n\n  uploadFile = (file, signedRequest, url) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', signedRequest);\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          console.log(url)\n        }\n        else {\n          alert('Could not upload file.');\n        }\n      }\n    };\n    xhr.send(file);\n  }\n  getSignedRequest = (file) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', `${server}/sign-s3?file-name=${file.name}&file-type=${file.type}`);\n    xhr.onreadystatechange = () => {\n      console.log(xhr.responseText)\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const response = JSON.parse(xhr.responseText);\n          console.log(response)\n          this.uploadFile(file, response.signedRequest, response.url);\n        }\n        else {\n          alert('Could not get signed URL.');\n        }\n      }\n    };\n    xhr.send();\n  }\n\n  onFormSubmit = e => {\n    e.preventDefault()\n    const files = document.getElementById('file-input').files;\n    const file = files[0];\n    if (file == null) {\n      return alert('No file selected.');\n    }\n    console.log(file)\n    this.getSignedRequest(file);\n    // const formData = new FormData();\n    // formData.append('file-input', this.state.file);\n    // this.getSignedRequest(formData);\n  }\n\n  onChange = (e) => {\n    this.setState({ file: e.target.files[0] });\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\" >\n        <div>File Upload</div>\n        <form onSubmit={e => this.onFormSubmit(e)}>\n          <h1>File Upload</h1>\n          <input type=\"file\" name=\"myImage\" id=\"file-input\" onChange={e => this.onChange(e)} />\n          <button type=\"submit\">Upload</button>\n        </form>\n\n        {/* <form onSubmit={e => uploadFiles(e)} encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"file-to-upload\" />\n        <input type=\"submit\" value=\"Upload\" />\n      </form> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}